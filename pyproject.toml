[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wazuh-mcp-server"
version = "1.0.0"
description = "Model Context Protocol (MCP) servers for Wazuh security platform integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mohammad Raya Satriatama", email = "rayasatriatama@gmail.com"}
]
maintainers = [
    {name = "Mohammad Raya Satriatama", email = "rayasatriatama@gmail.com"}
]
keywords = [
    "wazuh",
    "security",
    "mcp",
    "model-context-protocol",
    "siem",
    "opensearch",
    "elasticsearch",
    "cybersecurity"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers"
]
requires-python = ">=3.9"

dependencies = [
    "fastmcp>=2.11.0",
    "requests>=2.31.0",
    "elasticsearch>=8.10.0",
    "python-dotenv>=1.0.0",
    "uvicorn[standard]>=0.25.0",
    "fastapi>=0.104.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "tox>=4.11.0"
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "requests-mock>=1.11.0",
    "httpx>=0.25.0"
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "markdown-include>=0.8.1"
]

security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0"
]

monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "structlog>=23.2.0"
]

[project.urls]
Homepage = "https://github.com/RayaSatriatama/wazuh-mcp-server"
Documentation = "https://github.com/RayaSatriatama/wazuh-mcp-server/blob/main/docs/README.md"
Repository = "https://github.com/RayaSatriatama/wazuh-mcp-server"
"Bug Tracker" = "https://github.com/RayaSatriatama/wazuh-mcp-server/issues"
Changelog = "https://github.com/RayaSatriatama/wazuh-mcp-server/blob/main/CHANGELOG.md"
"Security Policy" = "https://github.com/RayaSatriatama/wazuh-mcp-server/blob/main/SECURITY.md"

[project.scripts]
wazuh-mcp-indexer = "wazuh_mcp_server.wazuh_indexer.server:main"
wazuh-mcp-manager = "wazuh_mcp_server.wazuh_manager.server:main"
wazuh-mcp-cli = "wazuh_mcp_server.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.toml", "*.cfg", "*.ini"]

# ===========================================
# TOOL CONFIGURATIONS
# ===========================================

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src/wazuh_mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--junitxml=pytest-results.xml"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "slow: Slow tests that take more than 5 seconds",
    "network: Tests requiring network access",
    "docker: Tests requiring Docker",
    "wazuh: Tests requiring Wazuh services"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
minversion = "7.0"
timeout = 300

[tool.coverage.run]
source = ["src/wazuh_mcp_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["wazuh_mcp_server"]
skip = [".gitignore", ".dockerignore"]

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "S608",  # possible SQL injection vector through string-based query construction
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S311"]  # Allow assert and random in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "elasticsearch.*",
    "requests.*",
    "uvicorn.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_variants

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']
